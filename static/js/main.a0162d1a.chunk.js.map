{"version":3,"sources":["components/Error.js","components/Formulario.js","components/Imagen.js","components/ListadoImagenes.js","App.js","serviceWorker.js","index.js"],"names":["Error","mensaje","className","Formulario","guardarBusqueda","useState","termino","guardarTermino","error","guardarError","onSubmit","e","preventDefault","trim","type","placeholder","onChange","target","value","Imagen","imagen","largeImageURL","likes","previewURL","tags","views","src","alt","href","rel","ListadoImagenes","imagenes","map","key","id","App","busqueda","guardarImagenes","paginaactual","guardarPaginaActual","totalpaginas","guardarTotalPaginas","useEffect","a","async","imagenesPorPagina","url","fetch","respuesta","json","resultado","hits","calcularTotalPaginas","Math","ceil","totalHits","document","querySelector","scrollIntoView","behavior","consultarApi","onClick","nuevaPaginaActual","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qKAQeA,EAND,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACZ,OACK,uBAAGC,UAAU,4CAA4CD,IC6CnDE,EA9CI,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,gBAAqB,EAEJC,mBAAS,IAFL,mBAE/BC,EAF+B,KAEtBC,EAFsB,OAGRF,oBAAS,GAHD,mBAG/BG,EAH+B,KAGxBC,EAHwB,KAmBtC,OACI,0BACIC,SAhBe,SAAAC,GACnBA,EAAEC,iBAGoB,KAAnBN,EAAQO,QAIXJ,GAAa,GAGbL,EAAgBE,IANZG,GAAa,KAab,yBAAKP,UAAU,OACX,yBAAKA,UAAU,uBACX,2BACIY,KAAK,OACLZ,UAAU,+BACVa,YAAY,8CACZC,SAAW,SAAAL,GAAC,OAAIJ,EAAeI,EAAEM,OAAOC,WAGhD,yBAAKhB,UAAU,uBACX,2BACIY,KAAK,SACLZ,UAAU,kCACVgB,MAAM,aAKhBV,EAAQ,kBAAC,EAAD,CAAOP,QAAQ,wCAAqC,OCd3DkB,EA5BA,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAGLC,EAAkDD,EAAlDC,cAAeC,EAAmCF,EAAnCE,MAAOC,EAA4BH,EAA5BG,WAAYC,EAAgBJ,EAAhBI,KAAMC,EAAUL,EAAVK,MAEhD,OACI,yBAAKvB,UAAU,0CACX,yBAAKA,UAAU,QACX,yBAAKwB,IAAKH,EAAYI,IAAKH,EAAMtB,UAAU,iBAE3C,yBAAKA,UAAU,aACX,uBAAGA,UAAU,aAAaoB,EAA1B,aACA,uBAAGpB,UAAU,aAAauB,EAA1B,YAGJ,yBAAKvB,UAAU,eACX,uBACI0B,KAAMP,EACNJ,OAAO,SACPY,IAAI,sBACJ3B,UAAU,6BAJd,kBCFL4B,EAbS,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACtB,OACI,yBAAK7B,UAAU,kBACV6B,EAASC,KAAI,SAAAZ,GAAM,OAChB,kBAAC,EAAD,CACIa,IAAKb,EAAOc,GACZd,OAAQA,SCgFbe,MArFf,WAAe,MAGyB9B,mBAAS,IAHlC,mBAGL+B,EAHK,KAGKhC,EAHL,OAIwBC,mBAAS,IAJjC,mBAIL0B,EAJK,KAIKM,EAJL,OAKiChC,mBAAS,GAL1C,mBAKLiC,EALK,KAKSC,EALT,OAMgClC,mBAAS,GANzC,mBAMLmC,EANK,KAMSC,EANT,KAkDb,OA1CAC,qBAAU,YACa,2BAAAC,EAAAC,OAAA,mDACD,KAAbR,EADc,wDAGXS,EAAoB,GACd,oCACNC,EALW,uCAIL,oCAJK,cAKoCV,EALpC,qBAKyDS,EALzD,iBAKmFP,GALnF,WAAAK,EAAA,MAOOI,MAAMD,IAPb,cAOXE,EAPW,mBAAAL,EAAA,MAQOK,EAAUC,QARjB,QAQXC,EARW,OAUjBb,EAAgBa,EAAUC,MAGpBC,EAAuBC,KAAKC,KAAKJ,EAAUK,UAAYV,GAC7DJ,EAAoBW,GAGFI,SAASC,cAAc,cAC/BC,eAAe,CAAEC,SAAU,WAlBpB,sCAoBrBC,KACC,CAACxB,EAAUE,IAqBZ,yBAAKpC,UAAU,aACb,yBAAKA,UAAU,aACX,uBAAGA,UAAU,oBAAb,2BAEA,kBAAC,EAAD,CACEE,gBAAiBA,KAIvB,yBAAKF,UAAU,8BACX,kBAAC,EAAD,CACE6B,SAAUA,IAGQ,IAAjBO,EAAsB,KACvB,4BACIxB,KAAK,SACLZ,UAAU,qBACV2D,QApCS,WACrB,IAAMC,EAAoBxB,EAAe,EAEhB,IAAtBwB,GAEHvB,EAAoBuB,KA4BZ,kBAOCxB,IAAiBE,EAAgB,KAClC,4BACE1B,KAAK,SACLZ,UAAU,gBACV2D,QAnCY,WACtB,IAAMC,EAAoBxB,EAAe,EAEtCwB,EAAoBtB,GAEvBD,EAAoBuB,KA2BZ,qBClEQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASb,SAASc,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a0162d1a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Error = ({mensaje}) => {\r\n    return ( \r\n         <p className=\"my-3 p-4 text-center alert alert-primary\">{mensaje}</p>\r\n     );\r\n}\r\n \r\nexport default Error;","import React, { useState } from 'react';\r\nimport Error from './Error';\r\n\r\nconst Formulario = ({guardarBusqueda}) => {\r\n\r\n    const [termino, guardarTermino] = useState('');\r\n    const [error, guardarError] = useState(false);\r\n\r\n    const buscarImagenes = e => {\r\n        e.preventDefault();\r\n\r\n        // validar\r\n        if(termino.trim() === '') {\r\n            guardarError(true);\r\n            return;\r\n        }\r\n        guardarError(false);\r\n\r\n        // enviar el termino de búsqueda hacia el componente principal\r\n        guardarBusqueda(termino);\r\n    }\r\n\r\n    return ( \r\n        <form\r\n            onSubmit={buscarImagenes}\r\n        >\r\n            <div className=\"row\">\r\n                <div className=\"form-group col-md-8\">\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"form-control form-control-lg\"\r\n                        placeholder=\"Busca una imagen, ejemplo: futbol o café\"\r\n                        onChange={ e => guardarTermino(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group col-md-4\">\r\n                    <input\r\n                        type=\"submit\"\r\n                        className=\"btn btn-lg btn-danger btn-block\"\r\n                        value=\"Buscar\"\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            { error ? <Error mensaje=\"Agrega un término de búsqueda\" /> : null }\r\n        </form>\r\n     );\r\n}\r\n \r\nexport default Formulario;","import React from 'react';\r\n\r\nconst Imagen = ({imagen}) => {\r\n\r\n    // extraer las variables\r\n    const { largeImageURL, likes, previewURL, tags, views } = imagen;\r\n\r\n    return ( \r\n        <div className=\"col-12 col-sm-6 col-md-4 col-lg-3 mb-4\">\r\n            <div className=\"card\">\r\n                <img src={previewURL} alt={tags} className=\"card-img-top\" />\r\n\r\n                <div className=\"card-body\">\r\n                    <p className=\"card-text\">{likes} Me Gusta</p>\r\n                    <p className=\"card-text\">{views} Vistas</p>\r\n                </div>\r\n\r\n                <div className=\"card-footer\">\r\n                    <a\r\n                        href={largeImageURL}\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                        className=\"btn btn-primary btn-block\"\r\n                    >Ver Imagen</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Imagen;","import React from 'react';\r\nimport Imagen from './Imagen';\r\n\r\nconst ListadoImagenes = ({imagenes}) => {\r\n    return ( \r\n        <div className=\"col-12 p-5 row\">\r\n            {imagenes.map(imagen => (\r\n                <Imagen \r\n                    key={imagen.id}\r\n                    imagen={imagen}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default ListadoImagenes;","import React, { useState, useEffect } from 'react';\r\nimport Formulario from './components/Formulario';\r\nimport ListadoImagenes from './components/ListadoImagenes';\r\n\r\nfunction App() {\r\n\r\n  // state de la app\r\n  const [ busqueda, guardarBusqueda ] = useState('');\r\n  const [ imagenes, guardarImagenes] = useState([]);\r\n  const [ paginaactual, guardarPaginaActual ] = useState(1);\r\n  const [ totalpaginas, guardarTotalPaginas] = useState(5);\r\n\r\n  useEffect(() => {\r\n    const consultarApi = async () => {\r\n        if(busqueda === '' ) return;\r\n\r\n        const imagenesPorPagina = 30;\r\n        const key = '1732750-d45b5378879d1e877cd1d35a6';\r\n        const url = `https://pixabay.com/api/?key=${key}&q=${busqueda}&per_page=${imagenesPorPagina}&page=${paginaactual}`;\r\n    \r\n        const respuesta = await fetch(url);\r\n        const resultado = await respuesta.json();\r\n\r\n        guardarImagenes(resultado.hits);\r\n\r\n        // calcular el total de paginas\r\n        const calcularTotalPaginas = Math.ceil(resultado.totalHits / imagenesPorPagina );\r\n        guardarTotalPaginas(calcularTotalPaginas);\r\n\r\n        // Mover la pantalla hacia arriba\r\n        const jumbotron = document.querySelector('.jumbotron');\r\n        jumbotron.scrollIntoView({ behavior: 'smooth' })\r\n    }\r\n    consultarApi();\r\n  }, [busqueda, paginaactual])\r\n\r\n  // definir la página anterior\r\n  const paginaAnterior = () => {\r\n    const nuevaPaginaActual = paginaactual - 1;\r\n\r\n    if(nuevaPaginaActual === 0 ) return;\r\n\r\n    guardarPaginaActual(nuevaPaginaActual);\r\n  }\r\n\r\n  // definir la pagina siguiente\r\n  const paginaSiguiente = () => {\r\n    const nuevaPaginaActual = paginaactual + 1;\r\n\r\n    if(nuevaPaginaActual > totalpaginas ) return;\r\n\r\n    guardarPaginaActual(nuevaPaginaActual);\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"jumbotron\">\r\n          <p className=\"lead text-center\">Buscador de Imágenes</p>\r\n\r\n          <Formulario \r\n            guardarBusqueda={guardarBusqueda}\r\n          />\r\n      </div>\r\n\r\n      <div className=\"row justify-content-center\">\r\n          <ListadoImagenes \r\n            imagenes={imagenes}\r\n          />\r\n\r\n          { (paginaactual === 1) ? null : (\r\n            <button \r\n                type=\"button\"\r\n                className=\"bbtn btn-info mr-1\"\r\n                onClick={paginaAnterior}\r\n            >&laquo; Anterior </button>\r\n          ) }\r\n\r\n          { (paginaactual === totalpaginas) ? null : (\r\n            <button \r\n              type=\"button\"\r\n              className=\"bbtn btn-info\"\r\n              onClick={paginaSiguiente}\r\n            >Siguiente &raquo;</button>\r\n          ) }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}